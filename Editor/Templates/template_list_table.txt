using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// %ClassName% のテーブルクラス.
/// テーブル自体はリードオンリーで書き換えることはできない.
///
/// This code is automatically generated by CsvConverter.
/// </summary>
public class %TableClassName% : ScriptableObject, IReadOnlyList<%ClassName%>
{
    [SerializeField]
    List<%ClassName%> rows;

    public %ClassName% Find(%FindArguments%)
    {
        for (int i = 0; i < rows.Count; i++)
        {
            %ClassName% o = rows[i];
            
            if (%FindPredicate%)
            {
                return o;
            }
        }
        return null;
    }

    // List
    public bool Contains(%ClassName% row)
    {
        return rows.Contains(row);
    }

    public int IndexOf(%ClassName% row)
    {
        return rows.IndexOf(row);
    }

    public int LastIndexOf(%ClassName% row)
    {
        return rows.LastIndexOf(row);
    }

    public void ForEach(Action<%ClassName%> action)
    {
        rows.ForEach(action);
    }

    public bool Exists(Predicate<%ClassName%> predicate)
    {
        return rows.Exists(predicate);
    }

    public %ClassName% this[int index]
    {
        get
        {
            return rows[index];
        }
    }

    // IReadOnlyCollection<%ClassName%> Members
    public int Count
    {
        get
        {
            return rows.Count;
        }
    }

    // IEnumerable<%ClassName%> Members
    IEnumerator<%ClassName%> IEnumerable<%ClassName%>.GetEnumerator()
    {
        return rows.GetEnumerator();
    }

    // IEnumerable Members
    IEnumerator IEnumerable.GetEnumerator()
    {
        return rows.GetEnumerator();
    }

#if UNITY_EDITOR
    [UnityEditor.MenuItem("Assets/Create/ProjectName/%TableClassName%")]
    public static void CreateInstance()
    {
        var obj = ScriptableObject.CreateInstance<%TableClassName%>();
        Generic.ScriptableObjectCreator.Create<%TableClassName%>(obj,name: "New%TableClassName%");
    }
#endif
}