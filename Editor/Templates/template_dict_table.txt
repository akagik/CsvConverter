using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// %ClassName% のテーブルクラス.
/// テーブル自体はリードオンリーで書き換えることはできない.
///
/// This code is automatically generated by CsvConverter.
/// </summary>
public class %TableClassName% : ScriptableObject, IReadOnlyList<%ClassName%>
{
    [SerializeField] List<%ClassName%> rows;

    private Dictionary<%KeyType%, %ClassName%> _dict;

    public %ClassName% Get(%KeyType% %KeyName%)
    {
        return _dict.TryGetValue(%KeyName%, out var o) ? o : null;
    }

    // List
    public bool Contains(%ClassName% row)
    {
        return rows.Contains(row);
    }

    public int IndexOf(%ClassName% row)
    {
        return rows.IndexOf(row);
    }

    public int LastIndexOf(%ClassName% row)
    {
        return rows.LastIndexOf(row);
    }

    public void ForEach(Action<%ClassName%> action)
    {
        rows.ForEach(action);
    }

    public bool Exists(Predicate<%ClassName%> predicate)
    {
        return rows.Exists(predicate);
    }

    // IReadOnlyDictionary Members
    // https://docs.microsoft.com/ja-jp/dotnet/api/system.collections.generic.ireadonlydictionary-2?view=netframework-4.8
    public %ClassName% this[int index] => rows[index];

    public bool ContainsKey(%KeyType% key)
    {
        return _dict.ContainsKey(key);
    }

    public bool ContainsValue(%ClassName% row)
    {
        return _dict.ContainsValue(row);
    }

    public IEnumerable<%KeyType%> Keys => _dict.Keys;

    public IEnumerable<%ClassName%> Values => _dict.Values;

    public bool TryGetValue(%KeyType% key, out %ClassName% value)
    {
        return _dict.TryGetValue(key, out value);
    }

    // IReadOnlyCollection<KeyValuePair<TKey,TValue>> Members
    public int Count => rows.Count;

    // IEnumerable<%ClassName%> Members
    IEnumerator<%ClassName%> IEnumerable<%ClassName%>.GetEnumerator()
    {
        return rows.GetEnumerator();
    }

    // IEnumerable Members
    IEnumerator IEnumerable.GetEnumerator()
    {
        return _dict.GetEnumerator();
    }

    void OnEnable()
    {
        _dict = new Dictionary<%KeyType%, %ClassName%>();

        if (rows == null)
        {
            return;
        }

        for (int i = 0; i < rows.Count; i++)
        {
            %ClassName% row = rows[i];
            _dict.Add(row.%KeyName%, row);
        }
    }

#if UNITY_EDITOR
    [UnityEditor.MenuItem("Assets/Create/CsvConverter/%TableClassName%")]
    public static void CreateInstance()
    {
        var obj = ScriptableObject.CreateInstance<%TableClassName%>();
        Generic.ScriptableObjectCreator.Create<%TableClassName%>(obj, name: "New%TableClassName%");
    }
#endif
}
