using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// %ClassName% のテーブルクラス.
/// テーブル自体はリードオンリーで書き換えることはできない.
///
/// This code is automatically generated by CsvConverter.
/// </summary>
public class %TableClassName% : ScriptableObject, ISerializationCallbackReceiver, IReadOnlyList<%ClassName%>
{
    [SerializeField]
    List<%ClassName%> rows;

    private Dictionary<%KeyType%,%ClassName%> _dict;

    public %ClassName% Get(%KeyType% %KeyName%) {
        %ClassName% o;
        if (_dict.TryGetValue(%KeyName%, out o)) {
            return o;
        }
        return null;
    }

    // List
    public bool Contains(%ClassName% row) {
        return rows.Contains(row);
    }

    public int IndexOf(%ClassName% row) {
        return rows.IndexOf(row);
    }

    public int LastIndexOf(%ClassName% row) {
        return rows.LastIndexOf(row);
    }

    public void ForEach(Action<%ClassName%> action) {
        rows.ForEach(action);
    }

    public bool Exists(Predicate<%ClassName%> predicate) {
        return rows.Exists(predicate);
    }

    // IReadOnlyDictionary Members
    // https://docs.microsoft.com/ja-jp/dotnet/api/system.collections.generic.ireadonlydictionary-2?view=netframework-4.8
    public %ClassName% this[int index]
    {
        get
        {
            return rows[index];
        }
    }

    public bool ContainsKey(int key)
    {
        return _dict.ContainsKey(key);
    }

    public bool ContainsValue(%ClassName% row) {
        return _dict.ContainsValue(row);
    }

    public IEnumerable<int> Keys
    {
        get
        {
            return _dict.Keys;
        }
    }

    public IEnumerable<%ClassName%> Values
    {
        get
        {
            return _dict.Values;
        }
    }

    public bool TryGetValue(int key,out %ClassName% value)
    {
        return _dict.TryGetValue(key,out value);
    }

    // IReadOnlyCollection<KeyValuePair<TKey,TValue>> Members
    public int Count
    {
        get
        {
            return rows.Count;
        }
    }

    // IEnumerable<%ClassName%> Members
    IEnumerator<%ClassName%> IEnumerable<%ClassName%>.GetEnumerator()
    {
        return rows.GetEnumerator();
    }

    // IEnumerable Members
    IEnumerator IEnumerable.GetEnumerator()
    {
        return _dict.GetEnumerator();
    }


    public void OnBeforeSerialize()
    {
        // rows = new Item[0];
        // dict の内容を rows に格納する.
        // ただし、マスターテーブルの場合、実行中に _dict が操作されることはないので
        // この操作は必要ない.
    }

    public void OnAfterDeserialize()
    {
        _dict = new Dictionary<%KeyType%,%ClassName%>();

        for(int i = 0; i < rows.Count; i++)
        {
            %ClassName% row = rows[i];
            _dict.Add(row.%KeyName%,row);
        }
    }

#if UNITY_EDITOR
    [UnityEditor.MenuItem("Assets/Create/CsvConverter/%TableClassName%")]
    public static void CreateInstance()
    {
        var obj = ScriptableObject.CreateInstance<%TableClassName%>();
        Generic.ScriptableObjectCreator.Create<%TableClassName%>(obj,name: "New%TableClassName%");
    }
#endif
}
